name: Pingo CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: pingo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/pingo_test
      SECRET_KEY: test-secret-key-for-ci-only
      DEBUG: True
      ALLOWED_HOSTS: localhost,127.0.0.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8 black isort

      # - name: Code formatting check (Black)
      #   working-directory: ./backend
      #   run: |
      #     black --check --diff .

      # - name: Import sorting check (isort)
      #   working-directory: ./backend
      #   run: |
      #     isort --check-only --diff .

      # - name: Lint with flake8
      #   working-directory: ./backend
      #   run: |
      #     # Stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # Treat all other issues as warnings
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run Django migrations
        working-directory: ./backend
        run: |
          python manage.py migrate

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Check Django deployment readiness
        working-directory: ./backend
        run: |
          python manage.py check --deploy

  security-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run security scan with Safety
        working-directory: ./backend
        run: |
          safety scan

      - name: Run security checks with Bandit
        working-directory: ./backend
        run: |
          bandit -r . -x tests/ -f json -o bandit-report.json || true
          bandit -r . -x tests/ --severity-level medium

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: .backend/bandit-report.json
